 # Push core skeleton (PAT) - create branch `core-skeleton` with project files using REPO_PUSH_TOKEN
name: Push core skeleton (PAT)

on:
  workflow_dispatch:

jobs:
  push-core-skeleton:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (shallow disabled)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up git user
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create project files
        run: |
          set -e
          mkdir -p core-skeleton
          cd core-skeleton

          # README
          cat > README.md <<'README_EOF'
          # MoodTracker — Core Skeleton (automated push)

          This branch contains a core skeleton for the MoodTracker app:
          - Email-only auth endpoints
          - Mood logging and 7-day alert demo
          - Quote endpoint
          - Counsellor & support links seeders
          - Blade demo + Chart.js
          - Docker compose + .env.example

          After pulling, run composer install, set .env, migrate & seed.
          README_EOF

          # docker-compose.yml
          cat > docker-compose.yml <<'DOCKER_EOF'
          version: "3.8"
          services:
            db:
              image: mysql:8.0
              environment:
                MYSQL_ROOT_PASSWORD: root
                MYSQL_DATABASE: moodtraker
                MYSQL_USER: mooduser
                MYSQL_PASSWORD: moodpass
              ports:
                - "3306:3306"
              volumes:
                - db_data:/var/lib/mysql

          volumes:
            db_data:
          DOCKER_EOF

          # .env.example
          cat > .env.example <<'ENV_EOF'
          APP_NAME=MoodTracker
          APP_ENV=local
          APP_KEY=base64:ReplaceWithYourKey
          APP_DEBUG=true
          APP_URL=http://localhost:8000

          DB_CONNECTION=mysql
          DB_HOST=127.0.0.1
          DB_PORT=3306
          DB_DATABASE=moodtraker
          DB_USERNAME=mooduser
          DB_PASSWORD=moodpass

          QUOTE_PROVIDER=zenquotes
          ZENQUOTES_URL=https://zenquotes.io/api/random
          TYPEFIT_URL=https://type.fit/api/quotes
          ENV_EOF

          # package.json (minimal)
          cat > package.json <<'PACKAGE_EOF'
          {
            "name": "moodtracker-frontend",
            "version": "0.1.0",
            "private": true,
            "dependencies": {
              "chart.js": "^4.0.0"
            },
            "scripts": {
              "dev": "echo 'No build step configured.'"
            }
          }
          PACKAGE_EOF

          # Routes (api.php)
          mkdir -p routes
          cat > routes/api.php <<'ROUTES_API_EOF'
          <?php
          use Illuminate\Support\Facades\Route;
          use App\Http\Controllers\AuthController;
          use App\Http\Controllers\MoodController;
          use App\Http\Controllers\QuoteController;
          use App\Http\Controllers\CounsellorController;
          use App\Http\Controllers\SupportLinkController;

          Route::post('/register', [AuthController::class, 'register']);
          Route::post('/login', [AuthController::class, 'login']);

          Route::post('/moods', [MoodController::class, 'store']);
          Route::get('/moods/trends', [MoodController::class, 'trends']);
          Route::get('/quote', [QuoteController::class, 'random']);
          Route::get('/counsellors', [CounsellorController::class, 'index']);
          Route::get('/support-links', [SupportLinkController::class, 'index']);
          ROUTES_API_EOF

          # Web route
          cat > routes/web.php <<'ROUTES_WEB_EOF'
          <?php
          use Illuminate\Support\Facades\Route;

          Route::get('/', function () {
              return view('welcome');
          });
          ROUTES_WEB_EOF

          # Basic Blade view
          mkdir -p resources/views
          cat > resources/views/welcome.blade.php <<'VIEW_EOF'
          <!doctype html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>MoodTracker — Demo</title>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
          </head>
          <body>
            <div class="container py-5">
              <h1 class="mb-4">MoodTracker — Demo (English UI)</h1>
              <div class="row">
                <div class="col-md-6">
                  <div class="card p-3 mb-3">
                    <h5>Quick Mood Entry</h5>
                    <form id="moodForm">
                      <input type="hidden" id="user_id" value="1">
                      <div class="mb-2">
                        <label class="form-label">Mood</label>
                        <select id="mood" class="form-select">
                          <option>Happy</option>
                          <option>Calm</option>
                          <option>Neutral</option>
                          <option>Sad</option>
                          <option>Anxious</option>
                          <option>Depressed</option>
                        </select>
                      </div>
                      <div class="mb-2">
                        <label class="form-label">Note (optional)</label>
                        <textarea id="note" class="form-control" rows="3"></textarea>
                      </div>
                      <button class="btn btn-primary" type="submit">Save</button>
                    </form>
                    <div id="alertBox" class="mt-3"></div>
                  </div>

                  <div class="card p-3">
                    <h5>Motivational Quote</h5>
                    <div id="quoteBox">Loading…</div>
                    <button id="refreshQuote" class="btn btn-link">New Quote</button>
                  </div>
                </div>

                <div class="col-md-6">
                  <div class="card p-3 mb-3">
                    <h5>Mood Trend (last 30 days)</h5>
                    <canvas id="trendChart" height="150"></canvas>
                  </div>

                  <div class="card p-3">
                    <h5>Anonymous Community Wall (demo)</h5>
                    <div id="wall" class="mb-2">
                      <p class="text-muted">Anonymous posts will appear here (demo).</p>
                    </div>
                    <textarea id="anonPost" class="form-control mb-2" placeholder="Share anonymously…"></textarea>
                    <button id="postAnon" class="btn btn-outline-secondary">Post</button>
                    <small class="form-text text-muted mt-2">Server-side moderation is required for production.</small>
                  </div>
                </div>
              </div>
            </div>

            <script src="/js/app.js"></script>
          </body>
          </html>
          VIEW_EOF

          # public JS
          mkdir -p public/js
          cat > public/js/app.js <<'JS_EOF'
          // Minimal frontend interactions: submit mood, load trends and quote
          document.addEventListener('DOMContentLoaded', function () {
            const moodForm = document.getElementById('moodForm');
            const alertBox = document.getElementById('alertBox');
            const quoteBox = document.getElementById('quoteBox');
            const refreshQuote = document.getElementById('refreshQuote');
            const userId = document.getElementById('user_id').value;

            moodForm.addEventListener('submit', async function (e) {
              e.preventDefault();
              const payload = {
                user_id: userId,
                mood: document.getElementById('mood').value,
                note: document.getElementById('note').value,
              };

              const res = await fetch('/api/moods', {
                method: 'POST',
                headers: {'Content-Type':'application/json'},
                body: JSON.stringify(payload)
              });
              const data = await res.json();
              if (data.emotional_alert && data.emotional_alert.alert) {
                alertBox.innerHTML = `<div class="alert alert-warning">${data.emotional_alert.message} <a href="/api/counsellors">Find Help</a></div>`;
              } else {
                alertBox.innerHTML = `<div class="alert alert-success">Mood saved.</div>`;
              }
              loadTrends();
            });

            refreshQuote.addEventListener('click', loadQuote);

            let chart;
            async function loadTrends() {
              const res = await fetch(`/api/moods/trends?user_id=${userId}`);
              const json = await res.json();
              const dates = json.data.map(d => (new Date(d.date)).toLocaleDateString());
              const moodLabels = json.data.map(d => d.mood);
              const map = {happy:4, calm:3, neutral:2, sad:1, depressed:0, anxious:1};
              const scores = moodLabels.map(m => map[m.toLowerCase()] ?? 2);
              const ctx = document.getElementById('trendChart').getContext('2d');
              if (chart) chart.destroy();
              chart = new Chart(ctx, {
                type: 'line',
                data: { labels: dates, datasets: [{ label: 'Mood Score', data: scores, borderColor: '#4e73df', fill: false }] },
                options: { scales: { y: { min: 0, max: 5 } } }
              });
            }

            const wall = document.getElementById('wall');
            const postAnon = document.getElementById('postAnon');
            postAnon.addEventListener('click', () => {
              const text = document.getElementById('anonPost').value.trim();
              if (!text) return;
              const el = document.createElement('div');
              el.className = 'mb-2 border p-2 bg-white';
              el.innerHTML = `<p>${escapeHtml(text)}</p><small class="text-muted">Anonymous</small>`;
              wall.prepend(el);
              document.getElementById('anonPost').value = '';
            });

            function escapeHtml(s){ return s.replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c])); }

            loadQuote();
            loadTrends();
          });
          JS_EOF

      - name: Push to core-skeleton branch using PAT
        env:
          REPO_PUSH_TOKEN: ${{ secrets.REPO_PUSH_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${REPO_PUSH_TOKEN}@github.com/${{ github.repository }}
          git push origin HEAD:core-skeleton --force
