 # Push core skeleton (PAT) - create branch `core-skeleton` with project files using REPO_PUSH_TOKEN
name: Push core skeleton (PAT)

on:
  workflow_dispatch:

jobs:
  push-core-skeleton:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (shallow disabled)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up git user
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create project files
        run: |
          set -e
          mkdir -p core-skeleton
          cd core-skeleton

          # README
          cat > README.md <<'README_EOF'
# MoodTracker — Core Skeleton (automated push)

This branch contains a core skeleton for the MoodTracker app:
- Email-only auth endpoints
- Mood logging and 7-day alert demo
- Quote endpoint
- Counsellor & support links seeders
- Blade demo + Chart.js
- Docker compose + .env.example

After pulling, run composer install, set .env, migrate & seed.
README_EOF

          # docker-compose.yml
          cat > docker-compose.yml <<'DOCKER_EOF'
version: "3.8"
services:
  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: moodtraker
      MYSQL_USER: mooduser
      MYSQL_PASSWORD: moodpass
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

volumes:
  db_data:
DOCKER_EOF

          # .env.example
          cat > .env.example <<'ENV_EOF'
APP_NAME=MoodTracker
APP_ENV=local
APP_KEY=base64:ReplaceWithYourKey
APP_DEBUG=true
APP_URL=http://localhost:8000

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=moodtraker
DB_USERNAME=mooduser
DB_PASSWORD=moodpass

QUOTE_PROVIDER=zenquotes
ZENQUOTES_URL=https://zenquotes.io/api/random
TYPEFIT_URL=https://type.fit/api/quotes
ENV_EOF

          # package.json (minimal)
          cat > package.json <<'PACKAGE_EOF'
{
  "name": "moodtracker-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "chart.js": "^4.0.0"
  },
  "scripts": {
    "dev": "echo 'No build step configured.'"
  }
}
PACKAGE_EOF

          # Routes (api.php)
          mkdir -p routes
          cat > routes/api.php <<'ROUTES_API_EOF'
<?php
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\AuthController;
use App\Http\Controllers\MoodController;
use App\Http\Controllers\QuoteController;
use App\Http\Controllers\CounsellorController;
use App\Http\Controllers\SupportLinkController;

Route::post('/register', [AuthController::class, 'register']);
Route::post('/login', [AuthController::class, 'login']);

Route::post('/moods', [MoodController::class, 'store']);
Route::get('/moods/trends', [MoodController::class, 'trends']);
Route::get('/quote', [QuoteController::class, 'random']);
Route::get('/counsellors', [CounsellorController::class, 'index']);
Route::get('/support-links', [SupportLinkController::class, 'index']);
ROUTES_API_EOF

          # Web route
          cat > routes/web.php <<'ROUTES_WEB_EOF'
<?php
use Illuminate\Support\Facades\Route;

Route::get('/', function () {
    return view('welcome');
});
ROUTES_WEB_EOF

          # Basic Blade view
          mkdir -p resources/views
          cat > resources/views/welcome.blade.php <<'VIEW_EOF'
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>MoodTracker — Demo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <div class="container py-5">
    <h1 class="mb-4">MoodTracker — Demo (English UI)</h1>
    <div class="row">
      <div class="col-md-6">
        <div class="card p-3 mb-3">
          <h5>Quick Mood Entry</h5>
          <form id="moodForm">
            <input type="hidden" id="user_id" value="1">
            <div class="mb-2">
              <label class="form-label">Mood</label>
              <select id="mood" class="form-select">
                <option>Happy</option>
                <option>Calm</option>
                <option>Neutral</option>
                <option>Sad</option>
                <option>Anxious</option>
                <option>Depressed</option>
              </select>
            </div>
            <div class="mb-2">
              <label class="form-label">Note (optional)</label>
              <textarea id="note" class="form-control" rows="3"></textarea>
            </div>
            <button class="btn btn-primary" type="submit">Save</button>
          </form>
          <div id="alertBox" class="mt-3"></div>
        </div>

        <div class="card p-3">
          <h5>Motivational Quote</h5>
          <div id="quoteBox">Loading…</div>
          <button id="refreshQuote" class="btn btn-link">New Quote</button>
        </div>
      </div>

      <div class="col-md-6">
        <div class="card p-3 mb-3">
          <h5>Mood Trend (last 30 days)</h5>
          <canvas id="trendChart" height="150"></canvas>
        </div>

        <div class="card p-3">
          <h5>Anonymous Community Wall (demo)</h5>
          <div id="wall" class="mb-2">
            <p class="text-muted">Anonymous posts will appear here (demo).</p>
          </div>
          <textarea id="anonPost" class="form-control mb-2" placeholder="Share anonymously…"></textarea>
          <button id="postAnon" class="btn btn-outline-secondary">Post</button>
          <small class="form-text text-muted mt-2">Server-side moderation is required for production.</small>
        </div>
      </div>
    </div>
  </div>

  <script src="/js/app.js"></script>
</body>
</html>
VIEW_EOF

          # public JS
          mkdir -p public/js
          cat > public/js/app.js <<'JS_EOF'
// Minimal frontend interactions: submit mood, load trends and quote
document.addEventListener('DOMContentLoaded', function () {
  const moodForm = document.getElementById('moodForm');
  const alertBox = document.getElementById('alertBox');
  const quoteBox = document.getElementById('quoteBox');
  const refreshQuote = document.getElementById('refreshQuote');
  const userId = document.getElementById('user_id').value;

  moodForm.addEventListener('submit', async function (e) {
    e.preventDefault();
    const payload = {
      user_id: userId,
      mood: document.getElementById('mood').value,
      note: document.getElementById('note').value,
    };

    const res = await fetch('/api/moods', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify(payload)
    });
    const data = await res.json();
    if (data.emotional_alert && data.emotional_alert.alert) {
      alertBox.innerHTML = `<div class="alert alert-warning">${data.emotional_alert.message} <a href="/api/counsellors">Find Help</a></div>`;
    } else {
      alertBox.innerHTML = `<div class="alert alert-success">Mood saved.</div>`;
    }
    loadTrends();
  });

  refreshQuote.addEventListener('click', loadQuote);

  let chart;
  async function loadTrends() {
    const res = await fetch(`/api/moods/trends?user_id=${userId}`);
    const json = await res.json();
    const dates = json.data.map(d => (new Date(d.date)).toLocaleDateString());
    const moodLabels = json.data.map(d => d.mood);
    const map = {happy:4, calm:3, neutral:2, sad:1, depressed:0, anxious:1};
    const scores = moodLabels.map(m => map[m.toLowerCase()] ?? 2);
    const ctx = document.getElementById('trendChart').getContext('2d');
    if (chart) chart.destroy();
    chart = new Chart(ctx, {
      type: 'line',
      data: { labels: dates, datasets: [{ label: 'Mood Score', data: scores, borderColor: '#4e73df', fill: false }] },
      options: { scales: { y: { min: 0, max: 5 } } }
    });
  }

  const wall = document.getElementById('wall');
  const postAnon = document.getElementById('postAnon');
  postAnon.addEventListener('click', () => {
    const text = document.getElementById('anonPost').value.trim();
    if (!text) return;
    const el = document.createElement('div');
    el.className = 'mb-2 border p-2 bg-white';
    el.innerHTML = `<p>${escapeHtml(text)}</p><small class="text-muted">Anonymous</small>`;
    wall.prepend(el);
    document.getElementById('anonPost').value = '';
  });

  function escapeHtml(s){ return s.replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c])); }

  loadQuote();
  loadTrends();
});
JS_EOF

          # Controllers
          mkdir -p app/Http/Controllers
          cat > app/Http/Controllers/AuthController.php <<'AUTH_CTRL_EOF'
<?php
namespace App\Http\Controllers;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\ValidationException;

class AuthController extends Controller
{
    public function register(Request $request)
    {
        $data = $request->validate(['name'=>'required|string|max:120','email'=>'required|email|unique:users','password'=>'required|min:6']);
        $user = User::create(['name'=>$data['name'],'email'=>$data['email'],'password'=>Hash::make($data['password'])]);
        return response()->json(['user'=>$user],201);
    }

    public function login(Request $request)
    {
        $request->validate(['email'=>'required|email','password'=>'required']);
        $user = User::where('email',$request->email)->first();
        if (! $user || ! Hash::check($request->password, $user->password)) {
            throw ValidationException::withMessages(['email'=>['The provided credentials are incorrect.']]);
        }
        return response()->json(['user'=>$user]);
    }
}
AUTH_CTRL_EOF

          cat > app/Http/Controllers/MoodController.php <<'MOOD_CTRL_EOF'
<?php
namespace App\Http\Controllers;
use Illuminate\Http\Request;
use App\Models\MoodLog;
use Illuminate\Support\Carbon;

class MoodController extends Controller
{
    public function store(Request $request)
    {
        $data = $request->validate(['user_id'=>'required|integer','mood'=>'required|string','note'=>'nullable|string','privacy'=>'nullable|in:private,public','date'=>'nullable|date']);
        $data['date'] = $data['date'] ?? now();
        $log = MoodLog::create(['user_id'=>$data['user_id'],'mood'=>$data['mood'],'note'=>$data['note'] ?? null,'privacy'=>$data['privacy'] ?? 'private','date'=>$data['date']]);
        $alert = $this->checkSevenDayAlert($data['user_id']);
        return response()->json(['log'=>$log,'emotional_alert'=>$alert]);
    }

    public function trends(Request $request)
    {
        $user_id = $request->query('user_id');
        $from = Carbon::now()->subDays(29)->startOfDay();
        $rows = MoodLog::where('user_id',$user_id)->where('date','>=',$from)->orderBy('date')->get(['date','mood']);
        return response()->json(['data'=>$rows]);
    }

    protected function checkSevenDayAlert($user_id)
    {
        $negative = collect(['sad','depressed','anxious','angry','hopeless']);
        $start = Carbon::now()->subDays(6)->startOfDay();
        $logs = MoodLog::where('user_id',$user_id)->where('date','>=',$start)->orderBy('date')->get();
        $days = collect();
        for ($i=0;$i<7;$i++){
            $dayStart = Carbon::now()->subDays($i)->startOfDay();
            $dayEnd = Carbon::now()->subDays($i)->endOfDay();
            $entry = $logs->first(function($l)use($dayStart,$dayEnd){ return $l->date >= $dayStart && $l->date <= $dayEnd; });
            $days->push($entry);
        }
        $continuousNegative = $days->every(function($entry)use($negative){ return $entry && $negative->contains(strtolower($entry->mood)); });
        if ($continuousNegative) {
            return ['alert'=>true,'message'=>"We noticed you've been feeling low for a while. Would you like to talk to someone?",'options'=>['connect_counsellor'=>'/api/counsellors','visit_community'=>'/support-links']];
        }
        return ['alert'=>false];
    }
}
MOOD_CTRL_EOF

          cat > app/Http/Controllers/QuoteController.php <<'QUOTE_CTRL_EOF'
<?php
namespace App\Http\Controllers;
use Illuminate\Support\Facades\Http;

class QuoteController extends Controller
{
    public function random()
    {
        $provider = env('QUOTE_PROVIDER','zenquotes');
        try {
            if ($provider === 'typefit') {
                $res = Http::get(env('TYPEFIT_URL'));
                if ($res->ok()) {
                    $all = $res->json();
                    $pick = $all[array_rand($all)];
                    return response()->json(['quote'=>$pick['text'] ?? '','author'=>$pick['author'] ?? 'Unknown']);
                }
            }
            $res = Http::get(env('ZENQUOTES_URL'));
            if ($res->ok()) {
                $json = $res->json();
                $item = is_array($json) ? ($json[0] ?? $json) : $json;
                return response()->json(['quote'=>$item['q'] ?? ($item['quote'] ?? ''),'author'=>$item['a'] ?? ($item['author'] ?? 'Unknown')]);
            }
        } catch (\Exception $e) {
            return response()->json(['quote'=>'Keep going—small steps count.','author'=>'MoodTracker']);
        }
        return response()->json(['quote'=>'Be kind to yourself.','author'=>'MoodTracker']);
    }
}
QUOTE_CTRL_EOF

          cat > app/Http/Controllers/CounsellorController.php <<'COUNSELLOR_CTRL_EOF'
<?php
namespace App\Http\Controllers;
use App\Models\Counsellor;
class CounsellorController extends Controller
{
    public function index() { return response()->json(['data'=>Counsellor::where('status','active')->get()]); }
}
COUNSELLOR_CTRL_EOF

          cat > app/Http/Controllers/SupportLinkController.php <<'SUPPORTLINK_CTRL_EOF'
<?php
namespace App\Http\Controllers;
use App\Models\SupportLink;
class SupportLinkController extends Controller
{
    public function index() { return response()->json(['data'=>SupportLink::where('verified',true)->get()]); }
}
SUPPORTLINK_CTRL_EOF

          # Models
          mkdir -p app/Models
          cat > app/Models/User.php <<'MODEL_USER_EOF'
<?php
namespace App\Models;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
class User extends Authenticatable {
  use Notifiable;
  protected $fillable = ['name','email','password','role'];
  protected $hidden = ['password','remember_token'];
}
MODEL_USER_EOF

          cat > app/Models/MoodLog.php <<'MODEL_MOOD_EOF'
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
class MoodLog extends Model {
  protected $table = 'mood_logs';
  protected $fillable = ['user_id','mood','note','privacy','date'];
  protected $dates = ['date'];
}
MODEL_MOOD_EOF

          cat > app/Models/Counsellor.php <<'MODEL_COUNSELLOR_EOF'
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
class Counsellor extends Model {
  protected $table = 'counsellors';
  protected $fillable = ['name','specialization','contact','availability','status'];
}
MODEL_COUNSELLOR_EOF

          cat > app/Models/SupportLink.php <<'MODEL_SUPPORTLINK_EOF'
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
class SupportLink extends Model {
  protected $table = 'support_links';
  protected $fillable = ['title','url','verified','notes'];
}
MODEL_SUPPORTLINK_EOF

          # Migrations
          mkdir -p database/migrations
          cat > database/migrations/2025_10_26_create_users_table.php <<'MIG_USERS_EOF'
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
class CreateUsersTable extends Migration {
  public function up(){
    Schema::create('users', function (Blueprint $table){
      $table->id();
      $table->string('name');
      $table->string('email')->unique();
      $table->string('password');
      $table->string('role')->default('user');
      $table->rememberToken();
      $table->timestamps();
    });
  }
  public function down(){ Schema::dropIfExists('users'); }
}
MIG_USERS_EOF

          cat > database/migrations/2025_10_26_create_mood_logs_table.php <<'MIG_MOOD_EOF'
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
class CreateMoodLogsTable extends Migration {
  public function up(){
    Schema::create('mood_logs', function (Blueprint $table){
      $table->id();
      $table->unsignedBigInteger('user_id')->index();
      $table->string('mood');
      $table->text('note')->nullable();
      $table->enum('privacy',['private','public'])->default('private');
      $table->dateTime('date')->default(now());
      $table->timestamps();
      $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
    });
  }
  public function down(){ Schema::dropIfExists('mood_logs'); }
}
MIG_MOOD_EOF

          cat > database/migrations/2025_10_26_create_counsellors_and_support_links.php <<'MIG_COUNSELLORS_EOF'
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
class CreateCounsellorsAndSupportLinks extends Migration {
  public function up(){
    Schema::create('counsellors', function (Blueprint $table){
      $table->id();
      $table->string('name');
      $table->string('specialization')->nullable();
      $table->string('contact')->nullable();
      $table->string('availability')->nullable();
      $table->enum('status',['active','inactive'])->default('active');
      $table->timestamps();
    });
    Schema::create('support_links', function (Blueprint $table){
      $table->id();
      $table->string('title');
      $table->string('url');
      $table->boolean('verified')->default(false);
      $table->text('notes')->nullable();
      $table->timestamps();
    });
  }
  public function down(){ Schema::dropIfExists('support_links'); Schema::dropIfExists('counsellors'); }
}
MIG_COUNSELLORS_EOF

          # Seeders
          mkdir -p database/seeders
          cat > database/seeders/DatabaseSeeder.php <<'SEED_DB_EOF'
<?php
namespace Database\Seeders;
use Illuminate\Database\Seeder;
class DatabaseSeeder extends Seeder {
  public function run(){ $this->call([\Database\Seeders\CounsellorSeeder::class, \Database\Seeders\UserSeeder::class]); }
}
SEED_DB_EOF

          cat > database/seeders/CounsellorSeeder.php <<'SEED_COUNSELLOR_EOF'
<?php
namespace Database\Seeders;
use Illuminate\Database\Seeder;
use App\Models\Counsellor;
use App\Models\SupportLink;
class CounsellorSeeder extends Seeder {
  public function run(){
    Counsellor::create(['name'=>'Dr. Farida Rahman','specialization'=>'Clinical Psychologist','contact'=>'tel:+88017xxxxxxx','availability'=>'Mon-Fri 10:00-16:00','status'=>'active']);
    SupportLink::create(['title'=>'Moner Kotha','url'=>'https://monerkotha.com','verified'=>true,'notes'=>'Friendly local community']);
    SupportLink::create(['title'=>'7UP Adda','url'=>'https://7upadda.example','verified'=>true,'notes'=>'Supportive community discussions']);
  }
}
SEED_COUNSELLOR_EOF

          cat > database/seeders/UserSeeder.php <<'SEED_USER_EOF'
<?php
namespace Database\Seeders;
use Illuminate\Database\Seeder;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
class UserSeeder extends Seeder {
  public function run(){
    User::create(['name'=>'Demo User','email'=>'demo@example.com','password'=>Hash::make('password123'),'role'=>'user']);
  }
}
SEED_USER_EOF

          # Finalize commit
          cd ..
          git add core-skeleton
          git commit -m "Add core skeleton for MoodTracker (automated by workflow)" || echo "Nothing to commit"

      - name: Push to core-skeleton branch using PAT
        env:
          REPO_PUSH_TOKEN: ${{ secrets.REPO_PUSH_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${REPO_PUSH_TOKEN}@github.com/${{ github.repository }}
          git push origin HEAD:core-skeleton --force
